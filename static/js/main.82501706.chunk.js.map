{"version":3,"sources":["Components/Location.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Location","props","link","this","icon","className","city","src","condition","temperature","humidity","Component","Form","inputCity","handleChange","onSubmit","type","placeHolder","onChange","App","state","temp_min","temp_max","newCity","getWeather","bind","toLowerCase","fetch","then","response","json","location","console","log","setState","main","temp","weather","description","catch","error","alert","event","preventDefault","target","value","reset","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qRAsBeA,G,wDAnBX,WAAYC,GAAQ,uCACVA,G,qDAGN,IAAIC,EAAO,oCAAsCC,KAAKF,MAAMG,KAAO,UACnE,OACI,yBAAKC,UAAU,YACX,4BAAKF,KAAKF,MAAMK,MAChB,yBAAKC,IAAKL,IACV,2BAAI,cAAgBC,KAAKF,MAAMO,WAC/B,2BAAI,gBAAkBL,KAAKF,MAAMQ,YAAc,SAG/C,2BAAI,aAAeN,KAAKF,MAAMS,SAAW,U,GAdlCC,cCiBRC,G,wDAfX,WAAYX,GAAQ,uCACVA,G,qDAEA,IAAD,EAC6BE,KAAKF,MAAhCY,EADF,EACEA,UAAWC,EADb,EACaA,aAElB,OACI,0BAAMC,SAAUF,GACZ,2BAAOG,KAAK,OAAOC,YAAY,eAAeC,SAAUJ,IACxD,oD,GAVGH,cCuFJQ,E,kDApFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXd,KAAM,gBACNG,YAAa,GACbY,SAAU,GACVC,SAAU,GACVZ,SAAU,GACVF,UAAW,GACXe,QAAS,GACTnB,KAAM,IAER,EAAKoB,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBACjB,EAAKX,aAAe,EAAKA,aAAaW,KAAlB,gBAdR,E,uDAiBHnB,GAAO,IAAD,OAETJ,EAAI,2DAAuDI,EAAKoB,cAA5D,kBADE,mCACF,mBACVC,MAAMzB,GACH0B,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACL,IAAME,EAAWF,EACjBG,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZzB,YAAasB,EAASI,KAAKC,KAC3Bf,SAAUU,EAASI,KAAKd,SACxBC,SAAUS,EAASI,KAAKb,SACxBZ,SAAUqB,EAASI,KAAKzB,SACxBF,UAAWuB,EAASM,QAAQ,GAAGC,YAC/BlC,KAAM2B,EAASM,QAAQ,GAAGjC,UAG7BmC,OAAM,SAACC,GACNC,MAAM,4D,mCAICC,GACXA,EAAMC,iBACNxC,KAAK+B,SAAS,CACZX,QAASmB,EAAME,OAAOC,U,gCAIhBH,GACRA,EAAMC,iBACNxC,KAAK+B,SAAS,CACZ5B,KAAMH,KAAKiB,MAAMG,UAEnBpB,KAAKqB,WAAWrB,KAAKiB,MAAMG,SAC3BmB,EAAME,OAAOE,U,0CAIb3C,KAAKqB,WAAWrB,KAAKiB,MAAMd,Q,+BAM3B,OACE,6BACE,yBAAKD,UAAU,OACb,wBAAIA,UAAU,SAAd,4BACA,kBAAC,EAAD,CAAMQ,UAAWV,KAAKU,UAAWC,aAAcX,KAAKW,eACpD,kBAAC,EAAD,CACEL,YAAaN,KAAKiB,MAAMX,YACxBY,SAAUlB,KAAKiB,MAAMC,SACrBC,SAAUnB,KAAKiB,MAAME,SACrBZ,SAAUP,KAAKiB,MAAMV,SACrBF,UAAWL,KAAKiB,MAAMZ,UACtBF,KAAMH,KAAKiB,MAAMd,KACjBF,KAAMD,KAAKiB,MAAMhB,a,GA7EXO,a,MCOEoC,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAMqB,c","file":"static/js/main.82501706.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Location extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        let link = \"http://openweathermap.org/img/wn/\" + this.props.icon + \"@4x.png\"\n        return (\n            <div className=\"location\">\n                <h3>{this.props.city}</h3>\n                <img src={link} />\n                <p>{\"Condition: \" + this.props.condition}</p>\n                <p>{\"Temperature: \" + this.props.temperature + \"Â°F\" }</p>\n                {/* <p>{this.props.temp_min}</p>\n                <p>{this.props.temp_max}</p> */}\n                <p>{\"Humidity: \" + this.props.humidity + \"%\"}</p>\n            </div>\n        )\n    }\n}\n\nexport default Location;","import React, {Component} from 'react';\nimport './Form.css';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        const {inputCity, handleChange} = this.props;\n\n        return (\n            <form onSubmit={inputCity}>\n                <input type=\"text\" placeHolder=\"Enter a City\" onChange={handleChange}/>\n                <button>Get Weather</button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React, {Component} from 'react';\nimport './App.css';\nimport Location from './Components/Location.js';\nimport Form from './Components/Form.js';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      city: \"San Francisco\",\n      temperature: \"\",\n      temp_min: \"\",\n      temp_max: \"\",\n      humidity: \"\",\n      condition: \"\",\n      newCity: \"\",\n      icon: \"\"\n    }\n    this.getWeather = this.getWeather.bind(this);\n    this.inputCity = this.inputCity.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  getWeather(city) {\n    const KEY = \"8a5ef08ed5c0d2cb0672425f4f244986\"\n    const link = `http://api.openweathermap.org/data/2.5/weather?q=${city.toLowerCase()}&appid=${KEY}&units=imperial`\n    fetch(link)\n      .then((response) => {\n        return response.json()\n      })\n      .then((response) => {\n        const location = response;\n        console.log(location)\n        this.setState({\n          temperature: location.main.temp,\n          temp_min: location.main.temp_min,\n          temp_max: location.main.temp_max,\n          humidity: location.main.humidity,\n          condition: location.weather[0].description,\n          icon: location.weather[0].icon,\n        })\n      })\n      .catch((error) => {\n        alert(\"You have entered an invalid city. Please try again.\")\n      })\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    this.setState({\n      newCity: event.target.value\n    })\n  }\n\n  inputCity(event) {\n    event.preventDefault();\n    this.setState({\n      city: this.state.newCity,\n    })\n    this.getWeather(this.state.newCity);\n    event.target.reset();\n  }\n\n  componentDidMount() {\n    this.getWeather(this.state.city);\n  }\n\n  render() {\n\n\n    return (\n      <div>\n        <div className=\"App\">\n          <h1 className=\"Title\">How's the weather today?</h1>\n          <Form inputCity={this.inputCity} handleChange={this.handleChange}/>\n          <Location \n            temperature={this.state.temperature}\n            temp_min={this.state.temp_min}\n            temp_max={this.state.temp_max}\n            humidity={this.state.humidity}\n            condition={this.state.condition}\n            city={this.state.city}\n            icon={this.state.icon}\n        />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}